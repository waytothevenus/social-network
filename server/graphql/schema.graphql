type User {
  _id: String! @id
  name: String!
  email: String!
  password: String
  avatarUrl: String
  liked: [Post] @relation(name: "LIKED", direction: "OUT")
  created: [Post] @relation(name: "POSTED", direction: "OUT")
  following: [User] @relation(name: "FOLLOWS", direction: "OUT")
  followers: [User] @relation(name: "FOLLOWS", direction: "IN")
  followingCount: Int
  @cypher(statement: "MATCH (this: User)-[:FOLLOWS]->(u: User) RETURN count(u)")
  followerCount: Int
  @cypher(statement: "MATCH (this: User)<-[:FOLLOWS]-(u: User) RETURN count(u)")
}

type Post {
  _id: String! @id
  date: _Neo4jDateTime
  content: String!
  likes: Int
  @cypher(statement: "MATCH (this: Post)<-[:LIKED]-(u:User) RETURN count(u)")
  Author: User
  @cypher(statement: "MATCH (this: Post)<-[:POSTED]-(u:User) RETURN u LIMIT 1")
  isLiked: Boolean
  @cypher(
    statement: """
    MATCH (this:Post)<-[r:LIKED]-(u:User)
    WHERE id(u) = $cypherParams.uid
    RETURN count(r) > 0
    """
  )
}

type Query {
  feed(first: Int = 25): [Post]
  @cypher(
    statement: """
    MATCH (u:User)-[:FOLLOWS]->(:User)-[:POSTED]->(p:Post)
    WHERE id(u) = $cypherParams.uid
    RETURN p
    ORDER BY p.date DESC
    LIMIT $first
    """
  )
  Profile: User
  @cypher(
    statement: """
    MATCH (u:User) WHERE id(u) = $cypherParams.uid
    RETURN u
    """
  )
}

type Mutation {
  NewPost(content: String = ""): Post
  @cypher(
    statement: """
    MATCH (u:User) WHERE id(u) = $cypherParams.uid
    CREATE (p: Post {content: $content, date: datetime() })<-[:POSTED]-(u)
    RETURN p
    """
  )
  RemovePost(postId: Int): User
  @cypher(
    statement: """
    MATCH (u:User)-[:POSTED]->(p:Post)
    WHERE id(u) = $cypherParams.uid AND id(p) = $postId
    DETACH DELETE p
    RETURN u
    """
  )
  Follow(userId: Int): User
  @cypher(
    statement: """
    MATCH (a:User), (b: User)
    WHERE id(a) = $cypherParams.uid AND id(b) = $userId
    CREATE (a)-[:FOLLOWS]->(b)
    RETURN b
    """
  )
  Unfollow(userId: Int): User
  @cypher(
    statement: """
    MATCH (a:User)-[r:FOLLOWS]->(b:User)
    WHERE id(a) = $cypherParams.uid AND id(b) = $userId
    DELETE r
    RETURN b
    """
  )
  Like(postId: Int): Post
  @cypher(
    statement: """
    MATCH (u:User), (p:Post)
    WHERE id(u) = $cypherParams.uid AND id(p) = $postId
    CREATE (u)-[:LIKED]->(p)
    RETURN p
    """
  )
  Unlike(postId: Int): Post
  @cypher(
    statement: """
    MATCH (u:User)-[r:LIKED]->(p:Post)
    WHERE id(u) = $cypherParams.uid AND id(p) = $postId
    DELETE r
    RETURN p
    """
  )
  SetAvatarUrl(url: String): User
  @cypher(
    statement: """
    MATCH (u:User) WHERE id(u) = $cypherParams.uid
    SET u.avatarUrl = $url
    RETURN u
    """
  )
}
